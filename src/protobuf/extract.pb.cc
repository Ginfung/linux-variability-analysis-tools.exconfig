// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "extract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Node_NodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Node_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PropertyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PropertyProto_PropertyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_extract_2eproto() {
  protobuf_AddDesc_extract_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "extract.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, nodetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, child_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  Node_NodeType_descriptor_ = Node_descriptor_->enum_type(0);
  Node_DataType_descriptor_ = Node_descriptor_->enum_type(1);
  PropertyProto_descriptor_ = file->message_type(1);
  static const int PropertyProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyProto, propertytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyProto, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyProto, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyProto, visibleexpr_),
  };
  PropertyProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyProto_descriptor_,
      PropertyProto::default_instance_,
      PropertyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyProto));
  PropertyProto_PropertyType_descriptor_ = PropertyProto_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_extract_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyProto_descriptor_, &PropertyProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_extract_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete PropertyProto::default_instance_;
  delete PropertyProto_reflection_;
}

void protobuf_AddDesc_extract_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rextract.proto\"\350\002\n\004Node\022 \n\010nodeType\030\001 \002"
    "(\0162\016.Node.NodeType\022 \n\010dataType\030\002 \001(\0162\016.N"
    "ode.DataType\022\n\n\002id\030\003 \001(\t\022\023\n\013description\030"
    "\004 \001(\t\022 \n\010property\030\005 \003(\0132\016.PropertyProto\022"
    "\021\n\tinherited\030\006 \001(\t\022\013\n\003opt\030\n \001(\010\022\024\n\005child"
    "\030d \003(\0132\005.Node\"^\n\010NodeType\022\n\n\006CONFIG\020\000\022\016\n"
    "\nMENUCONFIG\020\001\022\010\n\004MENU\020\002\022\n\n\006CHOICE\020\003\022\006\n\002I"
    "F\020\004\022\013\n\007COMMENT\020\005\022\013\n\007UNKNOWN\020\006\"C\n\010DataTyp"
    "e\022\013\n\007BOOLEAN\020\000\022\014\n\010TRISTATE\020\001\022\007\n\003INT\020\002\022\007\n"
    "\003HEX\020\003\022\n\n\006STRING\020\004\"\332\001\n\rPropertyProto\0221\n\014"
    "propertyType\030\001 \002(\0162\033.PropertyProto.Prope"
    "rtyType\022\r\n\005value\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\022\023\n\013"
    "visibleExpr\030\004 \001(\t\"d\n\014PropertyType\022\n\n\006PRO"
    "MPT\020\000\022\n\n\006SELECT\020\001\022\013\n\007DEFAULT\020\002\022\016\n\nDEPEND"
    "S_ON\020\003\022\t\n\005RANGE\020\004\022\007\n\003ENV\020\005\022\013\n\007UNKNOWN\020\006B"
    "\032\n\tgsd.linuxB\rKconfigProtos", 627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "extract.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  PropertyProto::default_instance_ = new PropertyProto();
  Node::default_instance_->InitAsDefaultInstance();
  PropertyProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_extract_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_extract_2eproto {
  StaticDescriptorInitializer_extract_2eproto() {
    protobuf_AddDesc_extract_2eproto();
  }
} static_descriptor_initializer_extract_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Node_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_NodeType_descriptor_;
}
bool Node_NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Node_NodeType Node::CONFIG;
const Node_NodeType Node::MENUCONFIG;
const Node_NodeType Node::MENU;
const Node_NodeType Node::CHOICE;
const Node_NodeType Node::IF;
const Node_NodeType Node::COMMENT;
const Node_NodeType Node::UNKNOWN;
const Node_NodeType Node::NodeType_MIN;
const Node_NodeType Node::NodeType_MAX;
const int Node::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Node_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_DataType_descriptor_;
}
bool Node_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Node_DataType Node::BOOLEAN;
const Node_DataType Node::TRISTATE;
const Node_DataType Node::INT;
const Node_DataType Node::HEX;
const Node_DataType Node::STRING;
const Node_DataType Node::DataType_MIN;
const Node_DataType Node::DataType_MAX;
const int Node::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Node::kNodeTypeFieldNumber;
const int Node::kDataTypeFieldNumber;
const int Node::kIdFieldNumber;
const int Node::kDescriptionFieldNumber;
const int Node::kPropertyFieldNumber;
const int Node::kInheritedFieldNumber;
const int Node::kOptFieldNumber;
const int Node::kChildFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  nodetype_ = 0;
  datatype_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inherited_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (inherited_ != &::google::protobuf::internal::kEmptyString) {
    delete inherited_;
  }
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extract_2eproto();  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodetype_ = 0;
    datatype_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_inherited()) {
      if (inherited_ != &::google::protobuf::internal::kEmptyString) {
        inherited_->clear();
      }
    }
    opt_ = false;
  }
  property_.Clear();
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Node.NodeType nodeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Node_NodeType_IsValid(value)) {
            set_nodetype(static_cast< ::Node_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataType;
        break;
      }
      
      // optional .Node.DataType dataType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Node_DataType_IsValid(value)) {
            set_datatype(static_cast< ::Node_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }
      
      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }
      
      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_property;
        break;
      }
      
      // repeated .PropertyProto property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_property;
        if (input->ExpectTag(50)) goto parse_inherited;
        break;
      }
      
      // optional string inherited = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inherited:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inherited()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inherited().data(), this->inherited().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_opt;
        break;
      }
      
      // optional bool opt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_child;
        break;
      }
      
      // repeated .Node child = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_child;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Node.NodeType nodeType = 1;
  if (has_nodetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->nodetype(), output);
  }
  
  // optional .Node.DataType dataType = 2;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->datatype(), output);
  }
  
  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }
  
  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }
  
  // repeated .PropertyProto property = 5;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->property(i), output);
  }
  
  // optional string inherited = 6;
  if (has_inherited()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inherited().data(), this->inherited().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->inherited(), output);
  }
  
  // optional bool opt = 10;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->opt(), output);
  }
  
  // repeated .Node child = 100;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->child(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Node.NodeType nodeType = 1;
  if (has_nodetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->nodetype(), target);
  }
  
  // optional .Node.DataType dataType = 2;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->datatype(), target);
  }
  
  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }
  
  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }
  
  // repeated .PropertyProto property = 5;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->property(i), target);
  }
  
  // optional string inherited = 6;
  if (has_inherited()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inherited().data(), this->inherited().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inherited(), target);
  }
  
  // optional bool opt = 10;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->opt(), target);
  }
  
  // repeated .Node child = 100;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->child(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Node.NodeType nodeType = 1;
    if (has_nodetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nodetype());
    }
    
    // optional .Node.DataType dataType = 2;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }
    
    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional string inherited = 6;
    if (has_inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inherited());
    }
    
    // optional bool opt = 10;
    if (has_opt()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .PropertyProto property = 5;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }
  
  // repeated .Node child = 100;
  total_size += 2 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  child_.MergeFrom(from.child_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodetype()) {
      set_nodetype(from.nodetype());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_inherited()) {
      set_inherited(from.inherited());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < property_size(); i++) {
    if (!this->property(i).IsInitialized()) return false;
  }
  for (int i = 0; i < child_size(); i++) {
    if (!this->child(i).IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(nodetype_, other->nodetype_);
    std::swap(datatype_, other->datatype_);
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    property_.Swap(&other->property_);
    std::swap(inherited_, other->inherited_);
    std::swap(opt_, other->opt_);
    child_.Swap(&other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PropertyProto_PropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyProto_PropertyType_descriptor_;
}
bool PropertyProto_PropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PropertyProto_PropertyType PropertyProto::PROMPT;
const PropertyProto_PropertyType PropertyProto::SELECT;
const PropertyProto_PropertyType PropertyProto::DEFAULT;
const PropertyProto_PropertyType PropertyProto::DEPENDS_ON;
const PropertyProto_PropertyType PropertyProto::RANGE;
const PropertyProto_PropertyType PropertyProto::ENV;
const PropertyProto_PropertyType PropertyProto::UNKNOWN;
const PropertyProto_PropertyType PropertyProto::PropertyType_MIN;
const PropertyProto_PropertyType PropertyProto::PropertyType_MAX;
const int PropertyProto::PropertyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PropertyProto::kPropertyTypeFieldNumber;
const int PropertyProto::kValueFieldNumber;
const int PropertyProto::kTextFieldNumber;
const int PropertyProto::kVisibleExprFieldNumber;
#endif  // !_MSC_VER

PropertyProto::PropertyProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyProto::InitAsDefaultInstance() {
}

PropertyProto::PropertyProto(const PropertyProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyProto::SharedCtor() {
  _cached_size_ = 0;
  propertytype_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visibleexpr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyProto::~PropertyProto() {
  SharedDtor();
}

void PropertyProto::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (visibleexpr_ != &::google::protobuf::internal::kEmptyString) {
    delete visibleexpr_;
  }
  if (this != default_instance_) {
  }
}

void PropertyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyProto_descriptor_;
}

const PropertyProto& PropertyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extract_2eproto();  return *default_instance_;
}

PropertyProto* PropertyProto::default_instance_ = NULL;

PropertyProto* PropertyProto::New() const {
  return new PropertyProto;
}

void PropertyProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propertytype_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_visibleexpr()) {
      if (visibleexpr_ != &::google::protobuf::internal::kEmptyString) {
        visibleexpr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PropertyProto.PropertyType propertyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PropertyProto_PropertyType_IsValid(value)) {
            set_propertytype(static_cast< ::PropertyProto_PropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_visibleExpr;
        break;
      }
      
      // optional string visibleExpr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visibleExpr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visibleexpr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->visibleexpr().data(), this->visibleexpr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PropertyProto.PropertyType propertyType = 1;
  if (has_propertytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->propertytype(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  // optional string visibleExpr = 4;
  if (has_visibleexpr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->visibleexpr().data(), this->visibleexpr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->visibleexpr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PropertyProto.PropertyType propertyType = 1;
  if (has_propertytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->propertytype(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  // optional string visibleExpr = 4;
  if (has_visibleexpr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->visibleexpr().data(), this->visibleexpr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->visibleexpr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PropertyProto.PropertyType propertyType = 1;
    if (has_propertytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->propertytype());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string visibleExpr = 4;
    if (has_visibleexpr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->visibleexpr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyProto::MergeFrom(const PropertyProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propertytype()) {
      set_propertytype(from.propertytype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_visibleexpr()) {
      set_visibleexpr(from.visibleexpr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyProto::CopyFrom(const PropertyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PropertyProto::Swap(PropertyProto* other) {
  if (other != this) {
    std::swap(propertytype_, other->propertytype_);
    std::swap(value_, other->value_);
    std::swap(text_, other->text_);
    std::swap(visibleexpr_, other->visibleexpr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyProto_descriptor_;
  metadata.reflection = PropertyProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
