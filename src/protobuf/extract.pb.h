// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extract.proto

#ifndef PROTOBUF_extract_2eproto__INCLUDED
#define PROTOBUF_extract_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_extract_2eproto();
void protobuf_AssignDesc_extract_2eproto();
void protobuf_ShutdownFile_extract_2eproto();

class Node;
class PropertyProto;

enum Node_NodeType {
  Node_NodeType_CONFIG = 0,
  Node_NodeType_MENUCONFIG = 1,
  Node_NodeType_MENU = 2,
  Node_NodeType_CHOICE = 3,
  Node_NodeType_IF = 4,
  Node_NodeType_COMMENT = 5,
  Node_NodeType_UNKNOWN = 6
};
bool Node_NodeType_IsValid(int value);
const Node_NodeType Node_NodeType_NodeType_MIN = Node_NodeType_CONFIG;
const Node_NodeType Node_NodeType_NodeType_MAX = Node_NodeType_UNKNOWN;
const int Node_NodeType_NodeType_ARRAYSIZE = Node_NodeType_NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Node_NodeType_descriptor();
inline const ::std::string& Node_NodeType_Name(Node_NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Node_NodeType_descriptor(), value);
}
inline bool Node_NodeType_Parse(
    const ::std::string& name, Node_NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_NodeType>(
    Node_NodeType_descriptor(), name, value);
}
enum Node_DataType {
  Node_DataType_BOOLEAN = 0,
  Node_DataType_TRISTATE = 1,
  Node_DataType_INT = 2,
  Node_DataType_HEX = 3,
  Node_DataType_STRING = 4
};
bool Node_DataType_IsValid(int value);
const Node_DataType Node_DataType_DataType_MIN = Node_DataType_BOOLEAN;
const Node_DataType Node_DataType_DataType_MAX = Node_DataType_STRING;
const int Node_DataType_DataType_ARRAYSIZE = Node_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Node_DataType_descriptor();
inline const ::std::string& Node_DataType_Name(Node_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Node_DataType_descriptor(), value);
}
inline bool Node_DataType_Parse(
    const ::std::string& name, Node_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_DataType>(
    Node_DataType_descriptor(), name, value);
}
enum PropertyProto_PropertyType {
  PropertyProto_PropertyType_PROMPT = 0,
  PropertyProto_PropertyType_SELECT = 1,
  PropertyProto_PropertyType_DEFAULT = 2,
  PropertyProto_PropertyType_DEPENDS_ON = 3,
  PropertyProto_PropertyType_RANGE = 4,
  PropertyProto_PropertyType_ENV = 5,
  PropertyProto_PropertyType_UNKNOWN = 6
};
bool PropertyProto_PropertyType_IsValid(int value);
const PropertyProto_PropertyType PropertyProto_PropertyType_PropertyType_MIN = PropertyProto_PropertyType_PROMPT;
const PropertyProto_PropertyType PropertyProto_PropertyType_PropertyType_MAX = PropertyProto_PropertyType_UNKNOWN;
const int PropertyProto_PropertyType_PropertyType_ARRAYSIZE = PropertyProto_PropertyType_PropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyProto_PropertyType_descriptor();
inline const ::std::string& PropertyProto_PropertyType_Name(PropertyProto_PropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyProto_PropertyType_descriptor(), value);
}
inline bool PropertyProto_PropertyType_Parse(
    const ::std::string& name, PropertyProto_PropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyProto_PropertyType>(
    PropertyProto_PropertyType_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();
  
  Node(const Node& from);
  
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();
  
  void Swap(Node* other);
  
  // implements Message ----------------------------------------------
  
  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Node_NodeType NodeType;
  static const NodeType CONFIG = Node_NodeType_CONFIG;
  static const NodeType MENUCONFIG = Node_NodeType_MENUCONFIG;
  static const NodeType MENU = Node_NodeType_MENU;
  static const NodeType CHOICE = Node_NodeType_CHOICE;
  static const NodeType IF = Node_NodeType_IF;
  static const NodeType COMMENT = Node_NodeType_COMMENT;
  static const NodeType UNKNOWN = Node_NodeType_UNKNOWN;
  static inline bool NodeType_IsValid(int value) {
    return Node_NodeType_IsValid(value);
  }
  static const NodeType NodeType_MIN =
    Node_NodeType_NodeType_MIN;
  static const NodeType NodeType_MAX =
    Node_NodeType_NodeType_MAX;
  static const int NodeType_ARRAYSIZE =
    Node_NodeType_NodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeType_descriptor() {
    return Node_NodeType_descriptor();
  }
  static inline const ::std::string& NodeType_Name(NodeType value) {
    return Node_NodeType_Name(value);
  }
  static inline bool NodeType_Parse(const ::std::string& name,
      NodeType* value) {
    return Node_NodeType_Parse(name, value);
  }
  
  typedef Node_DataType DataType;
  static const DataType BOOLEAN = Node_DataType_BOOLEAN;
  static const DataType TRISTATE = Node_DataType_TRISTATE;
  static const DataType INT = Node_DataType_INT;
  static const DataType HEX = Node_DataType_HEX;
  static const DataType STRING = Node_DataType_STRING;
  static inline bool DataType_IsValid(int value) {
    return Node_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Node_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Node_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Node_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Node_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Node_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Node_DataType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Node.NodeType nodeType = 1;
  inline bool has_nodetype() const;
  inline void clear_nodetype();
  static const int kNodeTypeFieldNumber = 1;
  inline ::Node_NodeType nodetype() const;
  inline void set_nodetype(::Node_NodeType value);
  
  // optional .Node.DataType dataType = 2;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDataTypeFieldNumber = 2;
  inline ::Node_DataType datatype() const;
  inline void set_datatype(::Node_DataType value);
  
  // optional string id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // repeated .PropertyProto property = 5;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 5;
  inline const ::PropertyProto& property(int index) const;
  inline ::PropertyProto* mutable_property(int index);
  inline ::PropertyProto* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::PropertyProto >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::PropertyProto >*
      mutable_property();
  
  // optional string inherited = 6;
  inline bool has_inherited() const;
  inline void clear_inherited();
  static const int kInheritedFieldNumber = 6;
  inline const ::std::string& inherited() const;
  inline void set_inherited(const ::std::string& value);
  inline void set_inherited(const char* value);
  inline void set_inherited(const char* value, size_t size);
  inline ::std::string* mutable_inherited();
  inline ::std::string* release_inherited();
  
  // optional bool opt = 10;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 10;
  inline bool opt() const;
  inline void set_opt(bool value);
  
  // repeated .Node child = 100;
  inline int child_size() const;
  inline void clear_child();
  static const int kChildFieldNumber = 100;
  inline const ::Node& child(int index) const;
  inline ::Node* mutable_child(int index);
  inline ::Node* add_child();
  inline const ::google::protobuf::RepeatedPtrField< ::Node >&
      child() const;
  inline ::google::protobuf::RepeatedPtrField< ::Node >*
      mutable_child();
  
  // @@protoc_insertion_point(class_scope:Node)
 private:
  inline void set_has_nodetype();
  inline void clear_has_nodetype();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_inherited();
  inline void clear_has_inherited();
  inline void set_has_opt();
  inline void clear_has_opt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int nodetype_;
  int datatype_;
  ::std::string* id_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::PropertyProto > property_;
  ::std::string* inherited_;
  ::google::protobuf::RepeatedPtrField< ::Node > child_;
  bool opt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_extract_2eproto();
  friend void protobuf_AssignDesc_extract_2eproto();
  friend void protobuf_ShutdownFile_extract_2eproto();
  
  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class PropertyProto : public ::google::protobuf::Message {
 public:
  PropertyProto();
  virtual ~PropertyProto();
  
  PropertyProto(const PropertyProto& from);
  
  inline PropertyProto& operator=(const PropertyProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyProto& default_instance();
  
  void Swap(PropertyProto* other);
  
  // implements Message ----------------------------------------------
  
  PropertyProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyProto& from);
  void MergeFrom(const PropertyProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PropertyProto_PropertyType PropertyType;
  static const PropertyType PROMPT = PropertyProto_PropertyType_PROMPT;
  static const PropertyType SELECT = PropertyProto_PropertyType_SELECT;
  static const PropertyType DEFAULT = PropertyProto_PropertyType_DEFAULT;
  static const PropertyType DEPENDS_ON = PropertyProto_PropertyType_DEPENDS_ON;
  static const PropertyType RANGE = PropertyProto_PropertyType_RANGE;
  static const PropertyType ENV = PropertyProto_PropertyType_ENV;
  static const PropertyType UNKNOWN = PropertyProto_PropertyType_UNKNOWN;
  static inline bool PropertyType_IsValid(int value) {
    return PropertyProto_PropertyType_IsValid(value);
  }
  static const PropertyType PropertyType_MIN =
    PropertyProto_PropertyType_PropertyType_MIN;
  static const PropertyType PropertyType_MAX =
    PropertyProto_PropertyType_PropertyType_MAX;
  static const int PropertyType_ARRAYSIZE =
    PropertyProto_PropertyType_PropertyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PropertyType_descriptor() {
    return PropertyProto_PropertyType_descriptor();
  }
  static inline const ::std::string& PropertyType_Name(PropertyType value) {
    return PropertyProto_PropertyType_Name(value);
  }
  static inline bool PropertyType_Parse(const ::std::string& name,
      PropertyType* value) {
    return PropertyProto_PropertyType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .PropertyProto.PropertyType propertyType = 1;
  inline bool has_propertytype() const;
  inline void clear_propertytype();
  static const int kPropertyTypeFieldNumber = 1;
  inline ::PropertyProto_PropertyType propertytype() const;
  inline void set_propertytype(::PropertyProto_PropertyType value);
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // optional string visibleExpr = 4;
  inline bool has_visibleexpr() const;
  inline void clear_visibleexpr();
  static const int kVisibleExprFieldNumber = 4;
  inline const ::std::string& visibleexpr() const;
  inline void set_visibleexpr(const ::std::string& value);
  inline void set_visibleexpr(const char* value);
  inline void set_visibleexpr(const char* value, size_t size);
  inline ::std::string* mutable_visibleexpr();
  inline ::std::string* release_visibleexpr();
  
  // @@protoc_insertion_point(class_scope:PropertyProto)
 private:
  inline void set_has_propertytype();
  inline void clear_has_propertytype();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_visibleexpr();
  inline void clear_has_visibleexpr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  ::std::string* text_;
  ::std::string* visibleexpr_;
  int propertytype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_extract_2eproto();
  friend void protobuf_AssignDesc_extract_2eproto();
  friend void protobuf_ShutdownFile_extract_2eproto();
  
  void InitAsDefaultInstance();
  static PropertyProto* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required .Node.NodeType nodeType = 1;
inline bool Node::has_nodetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_nodetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_nodetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_nodetype() {
  nodetype_ = 0;
  clear_has_nodetype();
}
inline ::Node_NodeType Node::nodetype() const {
  return static_cast< ::Node_NodeType >(nodetype_);
}
inline void Node::set_nodetype(::Node_NodeType value) {
  GOOGLE_DCHECK(::Node_NodeType_IsValid(value));
  set_has_nodetype();
  nodetype_ = value;
}

// optional .Node.DataType dataType = 2;
inline bool Node::has_datatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_datatype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::Node_DataType Node::datatype() const {
  return static_cast< ::Node_DataType >(datatype_);
}
inline void Node::set_datatype(::Node_DataType value) {
  GOOGLE_DCHECK(::Node_DataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
}

// optional string id = 3;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Node::id() const {
  return *id_;
}
inline void Node::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Node::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Node::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Node::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 4;
inline bool Node::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Node::description() const {
  return *description_;
}
inline void Node::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Node::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Node::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Node::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .PropertyProto property = 5;
inline int Node::property_size() const {
  return property_.size();
}
inline void Node::clear_property() {
  property_.Clear();
}
inline const ::PropertyProto& Node::property(int index) const {
  return property_.Get(index);
}
inline ::PropertyProto* Node::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::PropertyProto* Node::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PropertyProto >&
Node::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::PropertyProto >*
Node::mutable_property() {
  return &property_;
}

// optional string inherited = 6;
inline bool Node::has_inherited() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_inherited() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_inherited() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_inherited() {
  if (inherited_ != &::google::protobuf::internal::kEmptyString) {
    inherited_->clear();
  }
  clear_has_inherited();
}
inline const ::std::string& Node::inherited() const {
  return *inherited_;
}
inline void Node::set_inherited(const ::std::string& value) {
  set_has_inherited();
  if (inherited_ == &::google::protobuf::internal::kEmptyString) {
    inherited_ = new ::std::string;
  }
  inherited_->assign(value);
}
inline void Node::set_inherited(const char* value) {
  set_has_inherited();
  if (inherited_ == &::google::protobuf::internal::kEmptyString) {
    inherited_ = new ::std::string;
  }
  inherited_->assign(value);
}
inline void Node::set_inherited(const char* value, size_t size) {
  set_has_inherited();
  if (inherited_ == &::google::protobuf::internal::kEmptyString) {
    inherited_ = new ::std::string;
  }
  inherited_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_inherited() {
  set_has_inherited();
  if (inherited_ == &::google::protobuf::internal::kEmptyString) {
    inherited_ = new ::std::string;
  }
  return inherited_;
}
inline ::std::string* Node::release_inherited() {
  clear_has_inherited();
  if (inherited_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inherited_;
    inherited_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool opt = 10;
inline bool Node::has_opt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Node::set_has_opt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Node::clear_has_opt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Node::clear_opt() {
  opt_ = false;
  clear_has_opt();
}
inline bool Node::opt() const {
  return opt_;
}
inline void Node::set_opt(bool value) {
  set_has_opt();
  opt_ = value;
}

// repeated .Node child = 100;
inline int Node::child_size() const {
  return child_.size();
}
inline void Node::clear_child() {
  child_.Clear();
}
inline const ::Node& Node::child(int index) const {
  return child_.Get(index);
}
inline ::Node* Node::mutable_child(int index) {
  return child_.Mutable(index);
}
inline ::Node* Node::add_child() {
  return child_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Node >&
Node::child() const {
  return child_;
}
inline ::google::protobuf::RepeatedPtrField< ::Node >*
Node::mutable_child() {
  return &child_;
}

// -------------------------------------------------------------------

// PropertyProto

// required .PropertyProto.PropertyType propertyType = 1;
inline bool PropertyProto::has_propertytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyProto::set_has_propertytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyProto::clear_has_propertytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyProto::clear_propertytype() {
  propertytype_ = 0;
  clear_has_propertytype();
}
inline ::PropertyProto_PropertyType PropertyProto::propertytype() const {
  return static_cast< ::PropertyProto_PropertyType >(propertytype_);
}
inline void PropertyProto::set_propertytype(::PropertyProto_PropertyType value) {
  GOOGLE_DCHECK(::PropertyProto_PropertyType_IsValid(value));
  set_has_propertytype();
  propertytype_ = value;
}

// optional string value = 2;
inline bool PropertyProto::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyProto::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyProto::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PropertyProto::value() const {
  return *value_;
}
inline void PropertyProto::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PropertyProto::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PropertyProto::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyProto::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PropertyProto::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string text = 3;
inline bool PropertyProto::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyProto::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyProto::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyProto::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& PropertyProto::text() const {
  return *text_;
}
inline void PropertyProto::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void PropertyProto::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void PropertyProto::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyProto::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* PropertyProto::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string visibleExpr = 4;
inline bool PropertyProto::has_visibleexpr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyProto::set_has_visibleexpr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropertyProto::clear_has_visibleexpr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropertyProto::clear_visibleexpr() {
  if (visibleexpr_ != &::google::protobuf::internal::kEmptyString) {
    visibleexpr_->clear();
  }
  clear_has_visibleexpr();
}
inline const ::std::string& PropertyProto::visibleexpr() const {
  return *visibleexpr_;
}
inline void PropertyProto::set_visibleexpr(const ::std::string& value) {
  set_has_visibleexpr();
  if (visibleexpr_ == &::google::protobuf::internal::kEmptyString) {
    visibleexpr_ = new ::std::string;
  }
  visibleexpr_->assign(value);
}
inline void PropertyProto::set_visibleexpr(const char* value) {
  set_has_visibleexpr();
  if (visibleexpr_ == &::google::protobuf::internal::kEmptyString) {
    visibleexpr_ = new ::std::string;
  }
  visibleexpr_->assign(value);
}
inline void PropertyProto::set_visibleexpr(const char* value, size_t size) {
  set_has_visibleexpr();
  if (visibleexpr_ == &::google::protobuf::internal::kEmptyString) {
    visibleexpr_ = new ::std::string;
  }
  visibleexpr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyProto::mutable_visibleexpr() {
  set_has_visibleexpr();
  if (visibleexpr_ == &::google::protobuf::internal::kEmptyString) {
    visibleexpr_ = new ::std::string;
  }
  return visibleexpr_;
}
inline ::std::string* PropertyProto::release_visibleexpr() {
  clear_has_visibleexpr();
  if (visibleexpr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = visibleexpr_;
    visibleexpr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Node_NodeType>() {
  return ::Node_NodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Node_DataType>() {
  return ::Node_DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PropertyProto_PropertyType>() {
  return ::PropertyProto_PropertyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_extract_2eproto__INCLUDED
